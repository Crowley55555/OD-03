#Пузырьковая сортировка
"""✅Пузырьковая сортировка работает путем многократного прохода по массиву,
сравнивая соседние элементы и меняя их местами, если они находятся в неправильном порядке.
Процесс продолжается до тех пор, пока массив не будет отсортирован."""

mas = [3, 5, 2, 1, 9, 6, 4, 8, 7] #список
n = len(mas) #количество элементов
for run in range(n-1): # общий цикл сортировки
    for i in range(n-1-run): #цикл сравнения элементов списка
        if mas[i] > mas[i + 1]: #если первый элемент больше второго
            mas[i], mas[i + 1] = mas[i + 1], mas[i] #меняем их местами


print(mas) #вывод

# Быстрая сортировка
'''✅Быстрая сортировка использует метод «разделяй и властвуй». 
Она выбирает опорный элемент (pivot) и разделяет массив на две части: 
элементы меньше опорного и элементы больше опорного. 
Затем сортировка применяется рекурсивно к каждой части.'''

def quick_sort(s): #сортировка
    if len(s) <= 1: #если длина списка меньше или равна 1
        return s #возвращаем список
    element = s[0] #опорный элемент
    left = list(filter(lambda i: i < element, s)) #список элементов меньше опорного
    center = [i for i in s if i == element] #список элементов равных опорному
    right = list(filter(lambda i: i > element, s)) #список элементов больше опорного

    return quick_sort(left) + center + quick_sort(right) #рекурсивно сортируем списки

print(quick_sort([3, 5, 2, 1, 9, 6, 4, 8, 7])) #вывод


#Сортировка выбором
'''✅Сортировка выбором работает путем поиска минимального элемента 
в неотсортированной части массива и его обмена с первым элементом этой части. 
Затем процесс повторяется для оставшейся части массива'''

a = [3, 5, 2, 1, 9, 6, 4, 8, 7] #список
def selection_sort(arr): #сортировка
    for i in range(len(arr)): #цикл сортировки
        min_index = i #индекс минимального элемента
        for j in range(i + 1, len(arr)): #цикл поиска минимального элемента
            if arr[j] < arr[min_index]:  #если текущий элемент меньше минимального
                min_index = j #обновляем индекс
        arr[i], arr[min_index] = arr[min_index], arr[i] #меняем местами
    return arr #возвращаем отсортированный список

print(selection_sort(a)) #вывод


#Сортировка вставками
'''✅Сортировка вставками работает путем последовательного прохода по массиву 
и вставки элементов в правильное место в отсортированном массиве. 
Процесс повторяется до тех пор, пока массив не будет отсортирован'''

a = [3, 5, 2, 1, 9, 6, 4, 8, 7] #список
def insertion_sort(arr): #сортировка
    for i in range(1, len(arr)): #цикл сортировки по списку
        key = arr[i] #ключ списка для вставки
        j = i - 1 #индекс предыдущего элемента
        while j >= 0 and arr[j] > key: #цикл вставки
            arr[j + 1] = arr[j] #сдвигаем элементы вправо
            j -= 1 #уменьшаем индекс предыдущего элемента
        arr[j + 1] = key #вставляем ключ в правильное место
    return arr #возвращаем отсортированный список

print(insertion_sort(a)) #вывод





